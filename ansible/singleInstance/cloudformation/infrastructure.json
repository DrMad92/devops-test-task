
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
      "MasterUsername":{
          "Default": "testdbmaster",
          "NoEcho": "false",
          "Description" : "The Postgres database admin account user name",
          "Type": "String",
          "MinLength": "1",
          "MaxLength": "16",
          "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
      },
      "MasterPassword":{
          "Default": "testdbmasterpass",
          "NoEcho": "true",
          "Description" : "The Postgres database admin account password",
          "Type": "String",
          "MinLength": "1",
          "MaxLength": "16",
          "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
      }
  },
  "Mappings": {
      "RegionMap": {
          "eu-central-1": {
            "Location": "Frankfurt",
            "AMI": "ami-0bdf93799014acdc4"
          },
          "eu-west-3":{
            "Location": "Paris",
            "AMI": "ami-08182c55a1c188dee"
          },
          "eu-west-2":{
            "Location": "London",
            "AMI": "ami-0b0a60c0a2bd40612"
          },
          "eu-west-1":{
            "Location": "Ireland",
            "AMI":"ami-00035f41c82244dab"
          }
      }
  },
  "Resources": {
    "wallesterVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "wallesterVPC"
          }
        ]
      }
    },
    "subnet0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone" : {
          "Fn::Select" : [ 
            "0", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "VpcId": {
          "Ref": "wallesterVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "subnet-0"
          }
        ]
      }
    },
    "subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone" : {
          "Fn::Select" : [ 
            "1", 
            { 
              "Fn::GetAZs" : "" 
            } 
          ]
        },
        "VpcId": {
          "Ref": "wallesterVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "subnet-1"
          }
        ]
      }
    },
    "igw0a0b98dfc89ec4e7e": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "wallester-igw"
          }
        ]
      }
    },
    "dopt06f0d26d": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": { "Fn::Join" : [ "", [ { "Ref" : "AWS::Region" },"compute.internal" ] ] },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "acl096e319d984ac4660": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "wallesterVPC"
        }
      }
    },
    "rtb0fbe4c530f4c0664a": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "wallesterVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "wallester-route"
          }
        ]
      }
    },
    "elbclassiclb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "subnet0"
          },
          {
            "Ref": "subnet1"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "HTTP:8000/",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "Instances": [
          {
            "Ref": "webappEC2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBsg"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8000",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      },
      "DependsOn": "webappEC2"
    },
    "webappEC2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"]},
        "InstanceType": "t2.micro",
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "subnet0"
            },
            "GroupSet": [
              {
                "Ref": "DBsq"
              },
              {
                "Ref": "EC2sg"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      },
      "DependsOn": [ "subnet0","postgresInstance"]
    },
    "postgresInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "20",
        "AllowMajorVersionUpgrade": "false",
        "AutoMinorVersionUpgrade": "true",
        "DBInstanceClass": "db.t2.micro",
        "Port": "5432",
        "StorageType": "gp2",
        "BackupRetentionPeriod": "0",
        "MasterUsername": {
            "Ref" : "MasterUsername"
        },
        "MasterUserPassword": {
          "Ref" : "MasterPassword"
        },
        "PreferredBackupWindow": "03:25-03:55",
        "PreferredMaintenanceWindow": "mon:22:21-mon:22:51",
        "DBInstanceIdentifier": "testdb",
        "DBName": "testDB",
        "Engine": "postgres",
        "EngineVersion": "10.4",
        "LicenseModel": "postgresql-license",
        "DBSubnetGroupName": {
          "Ref": "dbsubnetdefaultvpc"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "DBsq"
          }
        ]
      }
    },
    "dbsubnetdefaultvpc": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Created from the RDS Management Console",
        "SubnetIds": [
          {
            "Ref": "subnet0"
          },
          {
            "Ref": "subnet1"
          }
        ]
      }
    },
    "EC2sg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "webserver security group",
        "VpcId": {
          "Ref": "wallesterVPC"
        }
      }
    },
    "ELBsg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "load-balancer-sg",
        "VpcId": {
          "Ref": "wallesterVPC"
        }
      }
    },
    "DBsq": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "db sg",
        "VpcId": {
          "Ref": "wallesterVPC"
        }
      }
    },
    "acl3": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acl096e319d984ac4660"
        }
      }
    },
    "acl4": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acl096e319d984ac4660"
        }
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "acl096e319d984ac4660"
        },
        "SubnetId": {
          "Ref": "subnet0"
        }
      }
    },
    "subnetacl4": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "acl096e319d984ac4660"
        },
        "SubnetId": {
          "Ref": "subnet1"
        }
      }
    },
    "gw2": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "wallesterVPC"
        },
        "InternetGatewayId": {
          "Ref": "igw0a0b98dfc89ec4e7e"
        }
      }
    },
    "subnetroute4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb0fbe4c530f4c0664a"
        },
        "SubnetId": {
          "Ref": "subnet0"
        }
      }
    },
    "subnetroute6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb0fbe4c530f4c0664a"
        },
        "SubnetId": {
          "Ref": "subnet1"
        }
      }
    },
    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtb0fbe4c530f4c0664a"
        },
        "GatewayId": {
          "Ref": "igw0a0b98dfc89ec4e7e"
        }
      },
      "DependsOn": "gw2"
    },
    "dchpassoc2": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "wallesterVPC"
        },
        "DhcpOptionsId": {
          "Ref": "dopt06f0d26d"
        }
      }
    },
    "ingress5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EC2sg"
        },
        "IpProtocol": "tcp",
        "FromPort": "8000",
        "ToPort": "8000",
        "SourceSecurityGroupId": {
          "Ref": "ELBsg"
        },
        "SourceSecurityGroupOwnerId": {
          "Ref": "ELBsg"
        }
      }
    },
    "ingress6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EC2sg"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ELBsg"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "DBsq"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "DBsq"
        },
          "SourceSecurityGroupOwnerId": {
            "Ref": "DBsq"
          }
      }
    },
    "egress4": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "EC2sg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress5": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "ELBsg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress6": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "DBsq"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    }
  },
  "Description": "",
  "Outputs": {
    "ELBPublicDNSName": {
      "Value": {
        "Fn::GetAtt": [
          "elbclassiclb",
          "DNSName"
        ]
      }
    },
    "webappEC2IP": {
      "Value": {
        "Fn::GetAtt": [
          "webappEC2",
          "PublicIp"
        ]
      }
    },
    "PostgresDNS": {
      "Value": {
        "Fn::GetAtt": [
          "postgresInstance",
          "Endpoint.Address"
        ]
      }
    }
  }
}