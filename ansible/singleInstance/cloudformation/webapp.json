
{
  "Parameters": {
    "NetworkStackName":{
      "Description" : "Network stack name to import values from",
      "Type": "String"
  },
    "DatabaseStackName":{
      "Description" : "Database stack name to import values from",
      "Type": "String"
  },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    }
  },
  "Mappings": {
      "RegionMap": {
          "eu-central-1": {
            "Location": "Frankfurt",
            "AMI": "ami-0bdf93799014acdc4"
          },
          "eu-west-3":{
            "Location": "Paris",
            "AMI": "ami-08182c55a1c188dee"
          },
          "eu-west-2":{
            "Location": "London",
            "AMI": "ami-0b0a60c0a2bd40612"
          },
          "eu-west-1":{
            "Location": "Ireland",
            "AMI":"ami-00035f41c82244dab"
          }
      }
  },
  "Resources": {
    "elbclassiclb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
              "Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}-subnet0"}
          },
          {
              "Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}-subnet1"}
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "HTTP:8000/",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "Instances": [
          {
            "Ref": "webappEC2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBsg"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8000",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      },
      "DependsOn": "webappEC2"
    },
    "webappEC2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"]},
        "InstanceType": "t2.micro",
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}-subnet0"}
            },
            "GroupSet": [
              {
                "Fn::ImportValue" : {"Fn::Sub" : "${DatabaseStackName}-DBsg"}
              },
              {
                "Ref": "EC2sg"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },
    "EC2sg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "webserver security group",
        "VpcId": {
          "Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}-VPC"}
        }
      }
    },
    "ELBsg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "load-balancer-sg",
        "VpcId": {
          "Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}-VPC"}
        }
      }
    },
    "EC2ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EC2sg"
        },
        "IpProtocol": "tcp",
        "FromPort": "8000",
        "ToPort": "8000",
        "SourceSecurityGroupId": {
          "Ref": "ELBsg"
        },
        "SourceSecurityGroupOwnerId": {
          "Ref": "ELBsg"
        }
      }
    },
    "EC2ingress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EC2sg"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ELBingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ELBsg"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EC2egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "EC2sg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ELBegress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "ELBsg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    }
  },
  "Outputs": {
    "ELBPublicDNSName": {
      "Value": {
        "Fn::GetAtt": [
          "elbclassiclb",
          "DNSName"
        ]
      }
    },
    "webappEC2IP": {
      "Value": {
        "Fn::GetAtt": [
          "webappEC2",
          "PublicIp"
        ]
      }
    }
  }
}